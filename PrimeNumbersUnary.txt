//
// Turing machine: accept prime number on the tape
// Input format: unary number 111...111
// Created by Egor Orachyov on 15.09.19
//

name: prime umber
init: q0
accept: prime

// Insert N left from input prime

q0,_
notPrime,_,-

q0,1
q1,1,<

q1,_
q2,N,>

// Check equals 1

q2,1
q3,1,>

q3,_
notPrime,_,-

q3,1
q4,1,>

// Skip to the end of the input

q4,1
q4,1,>

q4,_
q5,D,>

// Add fist divider

q5,_
loop,1,<

///////////////////
// Main loop
///////////////////

loop,D
inc1,D,>

inc1,1
inc1,1,>

inc1,_
inc2,1,>

inc2,_
cmp1,C,<

///////////////////
// Cmp equals (maybe divider == prime and need to stop)
///////////////////

cmp1,1
cmp1,1,<

cmp1,I
cmp1,I,<

cmp1,D
cmp1,D,<

cmp1,E
cmp2,1,>

cmp1,N
cmp2,N,>

cmp2,1
cmp3,E,>

// See, if divider has 1

cmp3,1
cmp3,1,>

cmp3,D
cmp4,D,>

cmp4,I
cmp4,I,>

cmp4,1
cmp1,I,<

cmp4,C
cmpClear,C,<

// See, if divider ended (beacuse prime is ended)

cmp2,D
cmp5,D,>

cmp5,I
cmp5,I,>

cmp5,C
prime,C,-

cmp5,1
cmpClear,1,<

// Clear tape from cmp tmp symbols

cmpClear,I
cmpClear,1,<

cmpClear,D
cmpClear,D,<

cmpClear,1
cmpClear,1,<

cmpClear,E
cmpMove,1,>

cmpMove,1
cmpMove,1,>

cmpMove,D
cmpMove,D,>

cmpMove,C
copy,C,-

///////////////////
// Copy prime
///////////////////

copy,C
copyPrime0,C,>

copyPrime0,_
copyPrime1,#,<

copyPrime1,D
copyPrime1,D,<

copyPrime1,C
copyPrime1,C,<

copyPrime1,1
copyPrime1,1,<

copyPrime1,E
copyPrime2,1,>

copyPrime1,N
copyPrime2,N,>

// Move 1

copyPrime2,1
copyPrime3,E,>

copyPrime3,1
copyPrime3,1,>

copyPrime3,D
copyPrime3,D,>

copyPrime3,C
copyPrime3,C,>

copyPrime3,#
copyPrime4,1,>

copyPrime4,_
copyPrime1,#,<

// Finish

copyPrime2,D
copyPrime5,D,>

copyPrime5,1
copyPrime5,1,>

copyPrime5,D
copyPrime5,D,>

copyPrime5,C
copyPrime5,C,>

copyPrime5,#
copyDivider0,#,>

///////////////////
// Copy divider
///////////////////

copyDivider0,_
copyDivider1,%,<

copyDivider1,C
copyDivider1,C,<

copyDivider1,1
copyDivider1,1,<

copyDivider1,_
copyDivider1,_,<

copyDivider1,#
copyDivider1,#,<

copyDivider1,E
copyDivider2,1,>

copyDivider1,D
copyDivider2,D,>

// Move 1

copyDivider2,1
copyDivider3,E,>

copyDivider3,1
copyDivider3,1,>

copyDivider3,_
copyDivider3,_,>

copyDivider3,#
copyDivider3,#,>

copyDivider3,C
copyDivider3,C,>

copyDivider3,%
copyDivider4,1,>

copyDivider4,_
copyDivider1,%,<

// Finish

copyDivider2,C
copyDivider5,C,>

copyDivider5,1
copyDivider5,1,>

copyDivider5,_
copyDivider5,_,>

copyDivider5,D
copyDivider5,D,>

copyDivider5,#
copyDivider5,#,>

copyDivider5,%
mod,%,-

///////////////////
// mod
///////////////////

mod,%
eqZeroPrime1,%,-

///////////////////
// Cmp prime equals zero or not
///////////////////

eqZeroPrime1,%
eqZeroPrime1,%,<

eqZeroPrime1,1
eqZeroPrime1,1,<

eqZeroPrime1,_
eqZeroPrime1,_,<

eqZeroPrime1,#
eqZeroPrime2,#,<

eqZeroPrime2,_
eqZeroPrime2,_,<

// Not zero

eqZeroPrime2,1
eqZeroPrime3,1,>

eqZeroPrime3,1
eqZeroPrime3,1,>

eqZeroPrime3,_
eqZeroPrime3,_,>

eqZeroPrime3,#
eqZeroPrime3,#,>

eqZeroPrime3,%
eqZeroPrime4,%,>

eqZeroPrime4,_
eqZeroDivider1,1,<

// Zero 

eqZeroPrime2,C
eqZeroPrime3Z,C,>

eqZeroPrime3Z,1
eqZeroPrime3Z,1,>

eqZeroPrime3Z,#
eqZeroPrime3Z,#,>

eqZeroPrime3Z,_
eqZeroPrime3Z,_,>

eqZeroPrime3Z,%
eqZeroPrime4Z,%,>

eqZeroPrime4Z,_
eqZeroDivider1,0,<

///////////////////
// Cmp divider equals zero or not
///////////////////

eqZeroDivider1,%
eqZeroDivider2,%,<

eqZeroDivider2,_
eqZeroDivider2,_,<

// Not zero

eqZeroDivider2,1
eqZeroDivider3,1,>

eqZeroDivider3,1
eqZeroDivider3,1,>

eqZeroDivider3,#
eqZeroDivider3,#,>

eqZeroDivider3,%
eqZeroDivider4,%,>

eqZeroDivider3,_
eqZeroDivider3,_,>

eqZeroDivider4,0
eqZeroDivider4,0,>

eqZeroDivider4,1
eqZeroDivider4,1,>

eqZeroDivider4,_
check,1,<

// Zero 

eqZeroDivider2,#
eqZeroDivider3Z,#,>

eqZeroDivider3Z,1
eqZeroDivider3Z,1,>

eqZeroDivider3Z,#
eqZeroDivider3Z,#,>

eqZeroDivider3Z,%
eqZeroDivider4Z,%,>

eqZeroDivider3Z,_
eqZeroDivider3Z,_,>

eqZeroDivider4Z,1
eqZeroDivider4Z,1,>

eqZeroDivider4Z,0
eqZeroDivider4Z,0,>

eqZeroDivider4Z,_
check,0,<

///////////////////
// Check result of cmp
///////////////////

check,1
check1,_,>

check,0
check0,_,>

check1,0
check10,_,-

check1,1
check11,_,-

check0,0
check00,_,-

check0,1
check01,_,-

///////////////////
// Check 00 - prime == 0 and divider == 0
///////////////////

check00,_
notPrime,_,-

///////////////////
// Check 11 - prime != 0 and divider != 0
///////////////////

check11,_
check11,_,<

check11,1
check11,1,<

check11,%
decDivider,%,<

// Dec divider

decDivider,_
decDivider,_,<

decDivider,1
decDividerMove,_,<

// Go to prime to dec

decDividerMove,1
decDividerMove,1,<

decDividerMove,#
decPrime,#,<

// Dec prime

decPrime,_
decPrime,_,<

decPrime,1
decPrimeMove,_,>

// Go to % to loop mod

decPrimeMove,_
decPrimeMove,_,>

decPrimeMove,1
decPrimeMove,1,>

decPrimeMove,#
decPrimeMove,#,>

decPrimeMove,%
mod,%,-

///////////////////
// Check 10 - prime != 0 and divider == 0
///////////////////

check10,_
check10,_,<

check10,%
check10,_,<

check10,#
copyDivider0,#,>

///////////////////
// Check 01 - prime == 0 and divider != 0
///////////////////

check01,_
check01,_,<

check01,%
check01,_,<

check01,1
check01,_,<

check01,#
check01,_,<

check01,C
moveToDivider,_,<

moveToDivider,1
moveToDivider,1,<

moveToDivider,D
loop,D,-
